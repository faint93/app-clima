{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","componentes/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","current","value","pais","datosConsulta","onSubmit","this","ref","defaultValue","htmlFor","id","type","disabled","Component","Error","mensaje","Clima","mostrarResultado","resultado","name","weather","main","urlIcono","icon","alt","temp","toFixed","src","feels_like","temp_max","temp_min","console","log","App","state","error","consulta","consultarApi","url","fetch","then","json","datos","setState","catch","prevProps","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wNAceA,EAZA,SAACC,GACZ,OACI,6BACI,6BACI,yBAAKC,UAAU,mCACX,uBAAGA,UAAU,cAAcD,EAAME,YCiEtCC,E,2MAnEXC,UAAYC,IAAMC,Y,EAClBC,QAAUF,IAAMC,Y,EAGhBE,YAAa,SAACC,GACVA,EAAEC,iBAGF,IAAMC,EAAY,CACdC,OAAQ,EAAKR,UAAUS,QAAQC,MAC/BC,KAAM,EAAKR,QAAQM,QAAQC,OAMnC,EAAKd,MAAMgB,cAAcL,I,wEAMrB,OACI,yBAAKV,UAAU,mBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,0BAAMgB,SAAUC,KAAKV,aACjB,yBAAKP,UAAU,uCACX,4BAAQkB,IAAKD,KAAKd,WACd,4BAAQgB,cAAY,GAApB,4BACA,yCACA,2CACA,+CACA,8CACA,6CACA,4CACA,8CACA,mDACA,4CACA,4CACA,yCACA,8CACA,0CACA,4CACA,0CACA,gDACA,iDAEJ,2BAAOC,QAAQ,QAAf,YAEJ,yBAAKpB,UAAU,uCACX,2BAAOqB,GAAG,KAAKR,MAAM,QAAQK,IAAKD,KAAKX,QAASgB,KAAK,OAAOC,UAAQ,IACpE,2BAAOH,QAAQ,UAAf,UAGJ,yBAAKpB,UAAU,+CACX,2BAAOsB,KAAK,SAAStB,UAAU,oDAAoDa,MAAM,uB,GA3DhGW,aCcVC,EAdD,SAAC1B,GACX,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,iCACVD,EAAM2B,aCsChBC,E,2MA1CXC,iBAAmB,WAAM,MAGS,EAAK7B,MAAM8B,UAAlCC,EAHc,EAGdA,KAAMC,EAHQ,EAGRA,QAASC,EAHD,EAGCA,KACtB,IAAIF,IAASC,IAAYC,EAAM,OAAO,KAEtC,IACMC,EAAQ,2CAAuCF,EAAQ,GAAGG,KAAlD,QACRC,EAAG,mBAAeL,GAExB,OACI,yBAAK9B,UAAU,OACX,yBAAKA,UAAU,+CACX,yBAAKA,UAAU,sCACX,0BAAMA,UAAU,cACZ,kDAAwB8B,GACxB,uBAAG9B,UAAU,eAAb,kBACoBgC,EAAKI,KAX9B,QAW6CC,QAAQ,GADhD,SAEI,yBAAKC,IAAKL,EAAUE,IAAKA,KAE7B,wDAAwBH,EAAKO,WAdlC,QAcuDF,QAAQ,GAA1D,SACA,uCAAaL,EAAKQ,SAfvB,QAe0CH,QAAQ,GAA7C,SACA,uCAAaL,EAAKS,SAhBvB,QAgB0CJ,QAAQ,GAA7C,c,wEAWpB,OADFK,QAAQC,IAAI1B,KAAKlB,MAAM8B,WAEjB,yBAAK7B,UAAU,aACXiB,KAAKW,wB,GArCDJ,aC8FLoB,E,2MAvFbC,MAAQ,CACNC,MAAO,GACPC,SAAU,GACVlB,UAAW,I,EAgBbmB,aAAe,WAAO,IAAD,EACI,EAAKH,MAAME,SAA3BpC,EADY,EACZA,OAAQG,EADI,EACJA,KACf,IAAIH,IAAWG,EAAM,OAAO,KAE5B,IACImC,EAAG,2DAAuDtC,EAAvD,YAAiEG,EAAjE,kBADO,oCAMdoC,MAAMD,GACLE,MAAK,SAAAzC,GACJ,OAAOA,EAAU0C,UAElBD,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZzB,UAAWwB,OAGdE,OAAM,SAAAT,GACLJ,QAAQC,IAAIG,O,EAMhB/B,cAAgB,SAAAL,GACU,6BAArBA,EAAUC,OACX,EAAK2C,SAAS,CACZR,OAAO,IAGT,EAAKQ,SAAS,CACZP,SAAUrC,EACVoC,OAAO,K,kFA/CMU,EAAWC,GACzBA,EAAUV,WAAa9B,KAAK4B,MAAME,UACnC9B,KAAK+B,iB,0CAMP/B,KAAKqC,SAAS,CACZR,OAAO,M,+BA+CX,IAEIjB,EAQJ,OALEA,EALYZ,KAAK4B,MAAMC,MAKX,kBAAC,EAAD,CAAOpB,QAAQ,oCAEf,kBAAC,EAAD,CAAOG,UAAaZ,KAAK4B,MAAMhB,YAKzC,yBAAK7B,UAAU,OACb,kBAAC,EAAD,CACEC,OAAS,6BAEX,kBAAC,EAAD,CACEc,cAAiBE,KAAKF,gBAEvBc,O,GAnFSL,aCKEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAT,GACLJ,QAAQI,MAAMA,EAAM0B,a","file":"static/js/main.9d61e288.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <div className=\"nav-wrapper light-blue darken-2\">\r\n                    <a className=\"brand-logo\">{props.titulo}</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Formulario extends Component {\r\n\r\n    //crear los refs\r\n    ciudadRef = React.createRef();\r\n    paisRef = React.createRef();\r\n\r\n    \r\n    buscarClima= (e) => {\r\n        e.preventDefault();\r\n\r\n        //leer los refs, crear objeto\r\n        const respuesta = {\r\n            ciudad: this.ciudadRef.current.value,\r\n            pais: this.paisRef.current.value\r\n    }\r\n\r\n    //console.log(respuesta);\r\n\r\n    //Enviar props\r\n    this.props.datosConsulta(respuesta);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"contenedor-form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form onSubmit={this.buscarClima}>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select ref={this.ciudadRef}>\r\n                                    <option defaultValue>Seleccione una ciudad...</option>\r\n                                    <option>Arica</option>\r\n                                    <option>Iquique</option>\r\n                                    <option>Antofagasta</option>\r\n                                    <option>Copiapó</option>\r\n                                    <option>La Serena</option>\r\n                                    <option>Coquimbo</option>\r\n                                    <option>Valparaiso</option>\r\n                                    <option>Viña del mar</option>\r\n                                    <option>Santiago</option>\r\n                                    <option>Rancagua</option>\r\n                                    <option>Talca</option>\r\n                                    <option>Concepcion</option>\r\n                                    <option>Temuco</option>\r\n                                    <option>Valdivia</option>\r\n                                    <option>Osorno</option>\r\n                                    <option>Puerto Montt</option>\r\n                                    <option>Punta Arenas</option>\r\n                                </select>\r\n                                <label htmlFor=\"pais\">Ciudad:</label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <input id=\"CL\" value=\"Chile\" ref={this.paisRef} type=\"text\" disabled/>\r\n                                <label htmlFor=\"ciudad\">Pais:</label>\r\n                            </div>\r\n                            \r\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large green accent-4\" value=\"Buscar...\"/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Formulario;\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst Error = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n                    <div className=\"card-panel red darken-4 error\">\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Error;","import React, { Component } from 'react';\r\n\r\nclass Clima extends Component {\r\n\r\n    mostrarResultado = () => {\r\n        //obtener datos de consulta\r\n\r\n        const {name, weather, main} = this.props.resultado;\r\n        if(!name || !weather || !main) return null;\r\n\r\n        const kelvin = 273.15;\r\n        const urlIcono = `http://openweathermap.org/img/wn/${weather[0].icon}.png`;\r\n        const alt = `clima de ${name}`;\r\n\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                        <span className=\"white-text\">\r\n                            <h2>El clima de hoy en {name}</h2>\r\n                            <p className=\"temperatura\">\r\n                                Temp. Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\r\n                                <img src={urlIcono} alt={alt}/>\r\n                            </p>\r\n                            <p>Sensación Térmica: {(main.feels_like - kelvin).toFixed(2)}&deg;C</p>\r\n                            <p>Maxima: {(main.temp_max - kelvin).toFixed(2)}&deg;C</p>\r\n                            <p>Minima: {(main.temp_min - kelvin).toFixed(2)}&deg;C</p>\r\n                        </span>\r\n                    </div> \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n      console.log(this.props.resultado);\r\n        return (\r\n            <div className=\"container\">\r\n               {this.mostrarResultado()}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Formulario from \"./Formulario\";\nimport Error from \"./Error\";\nimport Clima from \"./Clima\";\n\n\nclass App extends Component {\n\n  state = {\n    error: \"\",\n    consulta: {},\n    resultado: {}\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if(prevState.consulta !== this.state.consulta){\n      this.consultarApi();\n    }\n    \n  }\n\n  componentDidMount() {\n    this.setState({\n      error: false\n    })\n  }\n\n  consultarApi = () => {\n    const {ciudad, pais} = this.state.consulta;\n    if(!ciudad || !pais) return null;\n\n    const appID = \"62949871a2e14e925f5c28edad7c5927\";\n    let url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appID}`;\n\n    //console.log(url);\n\n    //query fetch api\n    fetch(url)\n    .then(respuesta => {\n      return respuesta.json();\n    })\n    .then(datos => {\n      this.setState({\n        resultado: datos\n      })\n    })\n    .catch(error => {\n      console.log(error)\n    })\n    \n\n  }\n\n  datosConsulta = respuesta => {\n    if(respuesta.ciudad === \"Seleccione una ciudad...\"){\n      this.setState({\n        error: true\n      })\n    } else {\n      this.setState({\n        consulta: respuesta,\n        error: false\n      })\n    }\n  }\n\n  \n  \nrender() {\n\n  const error = this.state.error;\n  \n  let resultado;\n\n  if(error){\n    resultado = <Error mensaje=\"Por favor seleccione una ciudad\" />\n  } else {\n    resultado = <Clima resultado = {this.state.resultado} />\n  }\n\n  return (\n      \n      <div className=\"app\">\n        <Header\n          titulo = \"El clima de hoy en Chile\"\n        />\n        <Formulario\n          datosConsulta = {this.datosConsulta}\n        />\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}